// 1. Create a collection named orders.

db.createCollection('orders')

// 2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.

db.orders.insert({ orderDate: new Date(2015-01-01), orderTotal: 4, lineItem: [{unitPrice: 3.00, quantity: 1, productName: "soap"}, {unitPrice: 25.00, quantity: 2, productName: "droid"}, {unitPrice: 100.00, quantity: 1, productName: "blaster"}]})
db.orders.insert({ orderDate: new Date(2016-02-10), orderTotal: 11, lineItem: [{unitPrice: 3.00, quantity: 3, productName: "soap"}, {unitPrice: 25.00, quantity: 8, productName: "droid"}]})
db.orders.insert({ orderDate: new Date(2012-10-05), orderTotal: 5, lineItem: [{unitPrice: 3.00, quantity: 3, productName: "bowcaster"}, {unitPrice: 25.00, quantity: 2, productName: "droid"}]})

// 3. Find a single order document, any order document.

db.orders.find({unitPrice: "3.00"})

// 4. Find all orders and make them look pretty.

db.orders.find().pretty()

// 5. Find all orders with an orderDate that is prior to 1/1/2016.

db.orders.find({"lineItem.orderDate": {$lt: new Date("2016-01-01")}})

// 6. Find all orders with an orderDate that is after 1/1/2016.

db.orders.find({orderDate: {$gt: new Date("2016-01-01")}})

// 7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.

db.orders.find({$and: [ {"lineItem.quantity": {$lt: 50}}, {"lineItem.quantity": {$gt: 5}}]})

// 8. Update one of your line items to 42.99. HINT: Look at dot notation

db.orders.update({"lineItem.productName": "soap"}, {$set: {price: "42.99"}})

// 9. Remove one of your orders.

db.orders.remove({"listItem.productName": "blaster"})
